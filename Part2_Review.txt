Security Analysis Report – 380-SECURE-CHAT

Reviewed by: Saanavi Goyal
Team Reviewed: Sujana Yeasmin & Gaurav Gupta

---

Security Assumptions:
- Long-term public keys are securely exchanged before the session begins.
- Diffie-Hellman parameters are cryptographically strong and securely generated.
- AES-256 (CTR mode assumed, but code uses CBC) and HMAC-SHA256 are assumed secure.
- The network is untrusted (susceptible to interception, tampering, and replay), but the devices are trusted.
- IVs and ephemeral keys are generated using secure randomness.

---

Security Claims and Verification:

1. Confidentiality
- Claim: AES-256-CTR is used to protect message content.
- Finding: The claim is accurate as the code uses EVP_aes_256_ctr(), which confirms the use of
           AES-256 in Counter (CTR) mode. CTR does not require padding, which eliminates risks of
           padding oracle attacks. The code also generates a new, random IV for every message using
           RAND_bytes(), ensuring semantic security.
- Recommendation: No change needed. AES-CTR is a strong, secure mode when implemented
           correctly with a unique IV per message, as done here. For additional simplicity and
           built-in integrity, AES-GCM could be considered in future implementations.

2. Integrity
   - Claim: HMAC-SHA256 ensures message integrity.
   - Finding: HMAC is correctly used to protect the IV and ciphertext. However, `memcmp()` is used for HMAC comparison, 
              which can leak information via timing side channels.
   - Recommendation: Use `CRYPTO_memcmp()` or a constant-time comparison function to prevent timing-based attacks.

3. Mutual Authentication
   - Claim: RSA signatures are used to verify ephemeral keys in 3DH.
   - Finding: This method provides strong authentication, assuming private keys are secure.
   - Risk: Compromised private keys allow impersonation.
   - Recommendation: Consider additional layers like mutual TLS for identity verification.

4. Forward Secrecy
   - Claim: Ephemeral keys ensure forward secrecy.
   - Finding: Confirmed. Session keys are derived from short-lived DH keys, ensuring past messages stay protected even
              if long-term keys are leaked.

5. Replay Protection
   - Claim: Unique IVs and ephemeral keys mitigate replay attacks.
   - Finding: This provides basic replay protection. However, there is no explicit use of nonces or timestamps,
              so replays within the same session may still be possible.
   - Recommendation: Implement message sequence numbers or timestamps for stronger protection.

6. Man-in-the-Middle (MitM) Protection
   - Claim: Signed ephemeral keys prevent unauthorized participation.
   - Finding: True, assuming keys are exchanged securely and verified.

---

Code Security Observations:

- Buffer Management: Use of fixed-size buffers (e.g., `char buf[1024]`) without input bounds checks could lead to buffer overflows.
- Memory Management: Some dynamic allocations (e.g., in `recvMsg`) don’t check for NULL, leading to potential crashes.
- Error Handling: Return values from encryption/decryption functions are often ignored, which could mask failures.
- Key Management: Global storage of session keys increases risk if memory is compromised.
                  Use local scope or secure memory zones where possible.

---

Overall Evaluation:
The project implements strong foundational cryptographic techniques such as 3DH key exchange, AES-256-CTR encryption,
and HMAC-SHA256 verification. It correctly uses ephemeral keys to achieve forward secrecy, and fresh IVs with HMACs to
ensure message confidentiality and integrity. The code also includes mutual authentication through signed ephemeral DH keys,
which helps prevent man-in-the-middle attacks.
While the cryptographic design is sound, there are a few implementation-level concerns:
- Memory safety: Some dynamic allocations are not checked for NULL, and fixed-size buffers could benefit from stricter
                 input validation to prevent overflows.
- Error handling: Return values from critical functions like encryption or HMAC computation are sometimes ignored, 
                  which could hide failures.
- Replay protection: The use of fresh IVs limits replay attacks across sessions, but the system does not currently
                     track message IDs or timestamps, leaving room for replay attacks within a session.

---

Suggestions for Improvement:
- Consider switching to AES-GCM for encryption, which provides built-in message integrity and may simplify HMAC handling.
- Ensure constant-time comparison is used for all sensitive data (e.g., HMACs) to prevent timing attacks.
- Introduce explicit replay protection by including a nonce, timestamp, or message sequence number in each message and rejecting duplicates.
- Add error checking for critical function calls, especially for memory allocation (malloc) and cryptographic operations (EVP_*, HMAC),
  to catch failures gracefully.
- Avoid global key storage by keeping the session key in a more limited scope and securely erasing it after use.
